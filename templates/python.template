# -- Python type hint https://www.python.org/dev/peps/pep-0484/
# -- Python docstring https://www.python.org/dev/peps/pep-0257/
$(escape("# AUTO GENERATED BASED ON Kong " .. kong_version .. ", DO NOT EDIT"))
$(escape("# Original source path: " .. path .. ".lua"))
# local function convert_type(type)
#   if type_mappers[type] then
#     return type_mappers[type]
#   end
#   return type
# end

from typing import TypeVar, Any, Union, List, Mapping, Tuple, Optional

number = TypeVar('number', int, float)
table = TypeVar('table', List[Any], Mapping[str, Any])
$(escape("# XXX"))
cdata = Any
err = str

# for _, cls in pairs_sorted(subclasses) do
#   local imp_path
#   if use_index_file then -- relative path
#     imp_path =  "." .. naming_converter(cls)
#   else -- full path
#     imp_path = "." .. naming_converter(class) .. "." .. naming_converter(cls)
#   end
from $(imp_path) import $(naming_converter(cls)) as cls_$(naming_converter(cls))
# end

class $(naming_converter(class))():

# for _, cls in pairs_sorted(subclasses) do
    $(naming_converter(cls)) = cls_$(naming_converter(cls))
# end

# for name, f in pairs_sorted(functions) do
#   local params = {}
#   local params_desc = {}
#   if f.tparam then
#     for _, v in ipairs(f.tparam) do
#       local name = v.name
#       if name == "varargs" then name = "*args" end
#       local t = convert_type(v.type)
#       if v.optional then t = "Optional[" .. t .. "]" end
#       table.insert(params, name .. ": " .. t)
#       table.insert(params_desc, name .. ": " .. v.desc .. "!type!" .. name .. ": " .. convert_type(v.type))
#     end
#   end
#   params = table.concat(params, ", ")
#   local returns = {}
#   local returns_desc = {}
#   if f.treturn then
#     for _, r in pairs_sorted(f.treturn) do
#       table.insert(returns, convert_type(r.type))
#       table.insert(returns_desc, (r.desc or name) .. "!return!" .. convert_type(r.type))
#     end
#   end
#   local ret = table.concat(returns, ", ")
#   if #returns > 1 then ret = "Tuple[" .. ret .. "]"
#   elseif #ret == 0 then ret = "None" end
#
#   name = naming_converter(name)
#   indent_1 = "        "
#   indent_2 = "            "
    @staticmethod
    def $(name)($(params)) -> $(ret):
        """

#   if f.desc then
            $(f.desc:gsub("\n", "\n" .. indent_2))

#   end
#   if f.phases and #f.phases > 0 then
        Phases:
            $(table.concat(f.phases, ", "))

# end
#   if f.usage and #f.usage > 0 then
        Example:
            $((f.usage or ""):gsub("local ", ""):gsub(" then\n%s*", ":\n    "):gsub("else\n%s*", "else:\n    "):gsub("%s*end\n*", ""):gsub("%-%-%s*", "# "):gsub("\n", "\n\n" .. indent_2))

# end
#   if f.tparam then
        :parameter $(table.concat(params_desc, "!n" .. indent_1 .. ":parameter "):gsub("\n", "\n" .. indent_2):gsub("!type!", "\n" .. indent_1 .. ":type "):gsub("!n", "\n"))

#   end
#   if f.treturn then
        :return: $(table.concat(returns_desc, "!n" .. indent_1 .. ":return: "):gsub("\n", "\n" .. indent_2):gsub("!return!", "\n\n" .. indent_1 .. ":rtype: "):gsub("!n", "\n"))
#   end
        """
        pass

# end
    pass